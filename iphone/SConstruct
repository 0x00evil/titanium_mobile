#!/usr/bin/env python
#
# Scons script for building the iphone library
#
import os,platform,sys



try:
	# pull in the version from the top-level SConstruct
	Import('version')
except:
	if ARGUMENTS.get('PRODUCT_VERSION', 0):
		version = ARGUMENTS['PRODUCT_VERSION']
	else:
		version = '0.0.0'

defines='TI_VERSION=%s ' % version

config = 'Release'

flags = ''

if ARGUMENTS.get('COMPILER_FLAGS', 0):
	flags = ARGUMENTS.get('COMPILER_FLAGS')


iphone_dir = os.path.abspath(os.path.join(os.path.dirname(sys._getframe(0).f_code.co_filename),'../','support','iphone'))
sys.path.append(iphone_dir)

import run,prereq


def build(dir,name,apiversion):
    # execute the phone and simulator release builds

    curdir = os.path.abspath(os.curdir)
    os.chdir(dir)


    if os.path.exists('/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS%s.sdk' % apiversion):
    	output = os.system("xcodebuild -sdk iphoneos%s -project Titanium.xcodeproj -target %s -configuration %s GCC_PREPROCESSOR_DEFINITIONS='%s %s' clean build" % (apiversion,name,config,defines,flags))
	if output!=0:
		sys.exit(output)

    if os.path.exists('/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator%s.sdk' % apiversion):
    	output = os.system("xcodebuild -sdk iphonesimulator%s -project Titanium.xcodeproj -target %s -configuration %s GCC_PREPROCESSOR_DEFINITIONS='DEBUG=1 %s %s' clean build" % (apiversion,name,config,defines,flags))

	if output!=0:
		sys.exit(-1)
	

    # build the merged library using lipo
    os.system("lipo build/%s-iphonesimulator/lib%s.a build/%s-iphoneos/lib%s.a -create -output build/lib%s.a" %(config,name,config,name,name))
   
    os.chdir(curdir)


build('iphone','Titanium','3.1.2')

sys.exit(0)
