#!/usr/bin/env python
import os,sys,shutil,platform,subprocess
import SCons.Variables
import SCons.Environment
from jsmin import JavascriptMinify

cwd = os.path.dirname(os.path.abspath(sys._getframe(0).f_code.co_filename))

try:
	# pull in the version from the top-level SConstruct
	Import('version')
except:
	if ARGUMENTS.get('PRODUCT_VERSION', 0):
		version = ARGUMENTS['PRODUCT_VERSION']
	else:
		version = '0.0.0'

def KReplaceVars(target, replacements):
	target = str(target)
	txt = open(target).read()
	for k, v in replacements.iteritems():
		txt = txt.replace(k, v)
	out = open(target, 'w')
	out.write(txt)
	out.close()

def KReplaceVarsStr(target, replacements):
	return 'KReplaceVars(%s, %s)' % (target, replacements)
ReplaceVarsAction = SCons.Action.ActionFactory(KReplaceVars, KReplaceVarsStr)

def KJar():
	# this is a HACK to get maps compiled with a empty module stub in the case the
	# app doesn't use maps to get around dalvik verification errors on the bytecode
	# and to not produce an unnecessary google maps dependency since some phones don't have it
	template_dir = os.path.abspath(os.path.dirname(sys._getframe(0).f_code.co_filename))
	map_classes = os.path.join(template_dir,'bin','map_classes')
	map_gen_classes = os.path.join(template_dir,'bin','map_gen_classes')
	classes_dir = os.path.join(template_dir,'bin','classes')
	print os.path.abspath(map_classes)
	if os.path.exists(map_classes):
		shutil.rmtree(map_classes)
	shutil.copytree(classes_dir,map_classes)
	map_dir = os.path.abspath('bin/classes/org/appcelerator/titanium/module/map')
	shutil.rmtree(map_dir)
	os.makedirs(map_dir)
	shutil.copyfile(os.path.join(map_gen_classes,'org/appcelerator/titanium/module/map/TitaniumMap.class'),os.path.join(classes_dir,'org/appcelerator/titanium/module/map/TitaniumMap.class'))
	cwd = os.getcwd()
	try:
		target = os.path.join(template_dir,'bin','titanium.jar')
		target2 = os.path.join(template_dir,'bin','titanium-map.jar')
		print classes_dir
		os.chdir(classes_dir)
		os.system("jar cvf \"%s\" *" % (target))
		os.chdir(map_classes)
		os.system("jar cvf \"%s\" *" % (target2))
	finally:
		os.chdir(cwd)

def KJarStr():
	 return 'KJar()'
JarAction = SCons.Action.ActionFactory(KJar,KJarStr)

replacements = {'TI_VERSION':version}
env = Environment()
if platform.system() == "Windows":
	env["JAVAC"] = os.path.join(os.environ['JAVA_HOME'],'bin','javac.exe')

targets = []
for f in Glob('src/assets/ti/debug/*'):
	fname = os.path.basename(str(f))
	target = env.Command(os.path.join('bin/classes/assets/ti/debug', fname), f, Copy("bin/classes/assets/ti/debug", "$SOURCE"))
	env.AddPostAction(target, ReplaceVarsAction(target[0], replacements))
	targets.append(target)

for f in Glob('src/org/appcelerator/titanium/*.properties'):
	fname = os.path.basename(str(f))
	target = env.Command(os.path.join('bin/classes/org/appcelerator/titanium', fname), f, Copy("bin/classes/org/appcelerator/titanium", "$SOURCE"))
	env.AddPostAction(target, ReplaceVarsAction(target[0], replacements))
	targets.append(target)

for f in Glob('src/org/appcelerator/titanium/module/ui/searchbar/*.png'):
	fname = os.path.basename(str(f))
	target = env.Command(os.path.join('bin/classes/org/appcelerator/titanium/module/ui/searchbar', fname), f, Copy("bin/classes/org/appcelerator/titanium/module/ui/searchbar", "$SOURCE"))
	env.AddPostAction(target, ReplaceVarsAction(target[0], replacements))
	targets.append(target)
	
for f in Glob('src/org/appcelerator/titanium/res/drawable/*',strings=True):
	fname = os.path.basename(str(f))
	t = env.Command(os.path.join('bin/classes/org/appcelerator/titanium/res/drawable', fname), f, Copy("bin/classes/org/appcelerator/titanium/res/drawable", "$SOURCE"))
	targets.append(t)

bin_tmp = 'bin/tmp'
if os.path.exists(bin_tmp):
	shutil.rmtree(bin_tmp)
os.makedirs(bin_tmp)

	
jsm = JavascriptMinify()

for f in Glob('src/org/appcelerator/titanium/module/facebook/resources/*',strings=True):
	fname = os.path.basename(str(f))
	ext = os.path.splitext(fname)[1]
	if ext =='.png':
		if fname[0:3]=='log': continue
	elif ext == '.js':
		# minify Javascript files
		inf = open(f,"r")
		tf = os.path.join(bin_tmp,os.path.basename(f))
		outf = open(tf,"w")
		jsm.minify(inf, outf)
		outf.close()
		inf.close()
		f = tf
	t = env.Command(os.path.join('bin/classes/org/appcelerator/titanium/module/facebook/resources', fname), f, Copy("bin/classes/org/appcelerator/titanium/module/facebook/resources", "$SOURCE"))
	targets.append(t)

android_sdk = '/opt/android-sdk'
if platform.system() == 'Windows':
	android_sdk = 'C:\\android-sdk'

tiall = env.Command('bin/classes/assets/ti/release/tiall.js', 'bin/classes/assets/ti/debug', os.path.join(cwd, 'gen-tiall.py') + " $TARGET $SOURCE")

maps_jar = os.path.join(android_sdk, 'add-ons','google_apis-3','libs','maps.jar')
android_jar = os.path.join(android_sdk, 'platforms', 'android-1.5', 'android.jar')
commons_logging_jar = os.path.join(cwd, 'lib', 'commons-logging-1.1.1.jar')

if not os.path.exists(android_jar):
	sys.stderr.write("Couldn't find Android JAR at %s\n" % android_jar)
	sys.exit(-1)

if not os.path.exists(maps_jar):
	maps_jar = os.path.join(android_sdk, 'add-ons', 'google_apis-3-r03', 'libs','maps.jar')
	if not os.path.exists(maps_jar):
		sys.stderr.write("Couldn't find Android Google Maps JAR at %s\n" % maps_jar)
		sys.exit(-1)


j = env.Java('bin/classes', 'src', JAVACFLAGS="-target 1.5 -classpath "+android_jar+os.pathsep+commons_logging_jar+os.pathsep+maps_jar)
pj = env.Java('bin/map_gen_classes', 'stubs', JAVACFLAGS="-target 1.5 -classpath "+android_jar+os.pathsep+commons_logging_jar+os.pathsep+maps_jar+os.pathsep+'bin/classes')
env.AddPostAction(pj,JarAction())
env.Depends(j, tiall)
env.Depends(tiall, targets)
env.Depends(pj, j)
